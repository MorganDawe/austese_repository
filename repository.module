<?php

/**
 * @file
 * Module file for content repository
 */

/**
 * @defgroup repository Content Repository
 * @ingroup austese
 * @{
 * Content Repository
 *
 */

/**
 * Implements hook_help().
 *
 */
function repository_help($path, $arg) {
  switch ($path) {
    case 'repository/agents':
        return t('Content Repository: Agents');
    case 'repository/events':
        return t('Content Repository: Events');
    case 'repository/artefacts':
        return t('Content Repository: Artefacts');
    case 'repository/versions':
        return t('Content Repository: Versions');
    case 'repository/works':
        return t('Content Repository: Works');
    case 'repository/resources':
        return t('Content Repository: Digital Resources');
    case 'repository/places':
        return t('Content Repository: Places');
    case 'admin/help#repository':
        return t('AustESE Content Repository');
  }
}

/**
 * Implements hook_permission().
 *
 */
function repository_permission() {
  return array(
    'edit metadata' => array(
      'title' => t('Edit metadata'),
      'description' => t('Allow users to create and edit ALL metadata in the content repository')
    ),
    'view metadata' => array(
      'title' => t('View metadata'),
      'description' => t('Allow users to view ALL metadata in the content repository')
    ),
    'view visualizations' => array(
      'title' => t('View visualizations'),
      'description' => t('Allow users to view visualizations')
    )
  );
}

/**
 * Implements hook_menu().
 *
 *
 * @see hook_menu()
 * @see menu_example
 */
function repository_menu() {
    // List object types
    $items['repository'] = array(
    'title' => 'Content Repository',
    'page callback' => 'repository_toc',
    'access arguments' => array('view metadata'),
    'type' => MENU_CALLBACK
  );
  
  // View objects by type
  $items['repository/%'] = array(
    'title arguments' => array('title'=>1),
    'title callback' => 'repository_display_title',
    'page callback' => 'repository_display',
    'page arguments' => array(1),
    'access arguments' => array('view metadata'),
    'type' => MENU_CALLBACK
  );
  // Add or edit an object of a specific type
  $items['repository/%/edit'] = array(
    'title arguments' => array('title'=>1),
    'title callback' => 'repository_display_edit_title',
    'page callback' => 'repository_edit',
    'page arguments' => array(1,3),
    'access arguments' => array('edit metadata'),
    'type' => MENU_CALLBACK
  );
  // Visualize an object of a specific type
  $items['repository/%/visualize'] = array(
    'title arguments' => array('title'=>1),
    'title callback' => 'repository_display_visualize_title',
    'page callback' => 'repository_visualize',
    'page arguments' => array(1,3),
    'access arguments' => array('view visualizations'),
    'type' => MENU_CALLBACK
  );
  // Map events
  $items['repository/events/map'] = array(
    'title' => 'Map of Events',
    'page callback' => 'repository_map_events',
    'page arguments' => array(1,3),
    'access arguments' => array('view visualizations'),
    'type' => MENU_CALLBACK
  );
  // Timeline of events
  $items['repository/events/timeline'] = array(
    'title' => 'Timeline of Events',
    'page callback' => 'repository_timeline_events',
    'page arguments' => array(),
    'access arguments' => array('view visualizations'),
    'type' => MENU_CALLBACK
  );
  $items['repository/resources/%/content'] = array(
    'title' => "",
    'page callback' => 'repository_display_resource',
    'page arguments' => array(2,4),
    'access arguments' => array('view metadata'),
    'type' => MENU_CALLBACK
  );
  // Record view for individual objects
  $items['repository/%/%'] = array(
    'title' => "",
    'page callback' => 'repository_display_record',
    'page arguments' => array(1,3),
    'access arguments' => array('view metadata'),
    'type' => MENU_CALLBACK
  );
  return $items;
}
function repository_xmlrpc() {
  $methods[] = array(
    'check_login',
    'repository_xmlrpc_check_login',
    array(
      'struct',
      'string'),
    t('Check the session is valid')
    );
  return $methods;
}
function repository_xmlrpc_check_login($sid) {
  if ("127.0.0.1" != $_SERVER['REMOTE_ADDR']) {
    return false;
  }
  // Refer: http://api.drupal.org/api/drupal/includes%21session.inc/function/_drupal_session_read/7
  $user = db_query("SELECT u.*, s.* FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid WHERE s.sid = :sid", array(':sid' => $sid))->fetchObject();

  $account = user_load($user->uid);

  $response['valid'] = (bool) $user;

  if ($user) {
    $response['user'] = $user;
    $response['account'] = $account;
    $response['admin'] = in_array('administrator', $account->roles);
  }

  return $response;
}

function repository_display_title($title){
    return ucwords($title);
}
function repository_display_edit_title($title){
    if ($title == "resources"){
        return "Edit Resource";
    } else {
        return 'Describe ' . ucwords(substr($title,0,-1));
    }
}
function repository_display_visualize_title($title){
    return 'Visualize ' . ucwords(substr($title,0,-1));
}
function repository_display_record_title($title){
    return 'View ' . ucwords(substr($title,0,-1));
}
function repository_description() {
  return array('#markup' => t('The austese content repository module'));
}

function _add_project_or_repository(&$breadcrumb) {
    $projectParam = array();
    if (isset($_GET['project'])) {
      $projectParam = array('query' => array('project' => $_GET['project']));
    }
    if (isset($_GET['project'])) {
        $project = node_load($_GET['project']);
        $breadcrumb[] = l($project->title, 'node/' . $project->nid, $projectParam);
    } else {
        $breadcrumb[] = l('Repository', 'repository',$projectParam);
    }
}

function repository_display($template){
    if (!in_array($template,array("agents","artefacts","versions","works","resources", "places", "events", "mvds", "collections"))) {
        drupal_access_denied();
        return;
    }
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = t(ucfirst($template)); 
    drupal_set_breadcrumb($breadcrumb);
    
    $modulePath = drupal_get_path('module', 'repository');
    drupal_add_js($modulePath . '/ui/lib/handlebars.js');
    drupal_add_js($modulePath . '/ui/js/entitytemplates.js');
    drupal_add_js($modulePath . '/ui/js/repository.js');
    drupal_add_css($modulePath . '/ui/css/repository.css');
    
    // resource organizer
    if ($template == 'resources'){
        if (!user_access('edit metadata')){
            drupal_access_denied();
            return;
        }
        drupal_add_js('/sites/all/libraries/ext-4.1.1a/ext-all.js');
        drupal_add_css(base_path().'sites/all/libraries/ext-4.1.1a/resources/css/ext-all.css', array('type'=>'external','every_page' => FALSE));
        drupal_add_css(base_path().'sites/all/libraries/ext-4.1.1a/resources/css/ext-all-gray.css',array('type'=>'external','every_page' => FALSE));
        drupal_add_css($modulePath . '/ui/css/uploader.css');
        drupal_add_js($modulePath . '/ui/lib/formdata.js');
        drupal_add_js($modulePath . '/ui/js/uploader.js');
        return theme("repository_resources", array());
    } else if ($template == 'places'){
        drupal_add_css('http://cdn.leafletjs.com/leaflet-0.4/leaflet.css',array('type' => 'external'));
        drupal_add_js('http://cdn.leafletjs.com/leaflet-0.4/leaflet.js',array('type' => 'external'));
        return theme("repository_display",array());
    } else {
        return theme("repository_display",array());
    }
}
function repository_edit($template, $id=null){
    if (!in_array($template,array("agents","artefacts","versions","works", "resources", "events", "mvds", "collections"))) {
        drupal_access_denied();
        return;
    }
    if (!user_access('edit metadata')){
        drupal_access_denied();
        return;
    }
    $projectParam = array();
    if (isset($_GET['project'])) {
       $projectParam = array('query' => array('project' => $_GET['project']));
    }
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = l(ucwords($template),'repository/'.$template,$projectParam);
    if ($template != 'mvds'){
        $breadcrumb[] = l('View '. ucwords(substr($template,0,-1)),'repository/'.$template.'/'.$id,$projectParam);
    }
    $breadcrumb[] = t('Edit '. ucfirst(substr($template,0,-1))); 
    drupal_set_breadcrumb($breadcrumb);
    
    // Add scripts
    $modulePath = drupal_get_path('module', 'repository');
    drupal_add_js($modulePath . '/ui/lib/select2/select2.min.js');
    // NB: jQuery UI 1.10.x should be installed using jquery update module
    drupal_add_js($modulePath . '/ui/lib/select2/jquery-ui-1.10.3.custom.js');
    drupal_add_css($modulePath . '/ui/lib/select2/select2.css',  array('group' => CSS_DEFAULT, 'every_page' => FALSE));
    drupal_add_js($modulePath . '/ui/lib/js2form.js');
    drupal_add_js($modulePath . '/ui/lib/wysihtml5-0.3.0.min.js');
    drupal_add_js($modulePath . '/ui/lib/bootstrap-wysihtml5.js');
    drupal_add_css($modulePath. '/ui/lib/bootstrap-wysihtml5.css',  array('group' => CSS_DEFAULT, 'every_page' => FALSE));
    drupal_add_js($modulePath . '/ui/lib/handlebars.js');
    drupal_add_js($modulePath . '/ui/js/entitytemplates.js');
    if ($template == "resources"){
        if (isset($_GET['multi'])) {
           $multiParam = true;
        } else {
            $multiParam = false;
        }
        drupal_add_js($modulePath . '/ui/lib/codemirror/codemirror.js');
        // support collapsing tags
        drupal_add_js($modulePath. '/ui/lib/codemirror/foldcode.js');
        drupal_add_js($modulePath. '/ui/lib/codemirror/xml-fold.js');
        // support autoclosing tags
        drupal_add_js($modulePath . '/ui/lib/codemirror/closetag.js');
        // support highlighting tags pairs
        drupal_add_js($modulePath . '/ui/lib/codemirror/matchtags.js');
        // autocmpletion
        drupal_add_js($modulePath. '/ui/lib/codemirror/show-hint.js');
        drupal_add_js($modulePath. '/ui/lib/codemirror/xml-hint.js');
        drupal_add_css($modulePath. '/ui/lib/codemirror/show-hint.css');
        drupal_add_css($modulePath . '/ui/css/tei.css');
        if ($multiParam) {
            drupal_add_js($modulePath . '/ui/lib/codemirror/merge/dep/diff_match_patch.js');
            drupal_add_js($modulePath . '/ui/lib/codemirror/merge/merge.js');
            drupal_add_css($modulePath. '/ui/lib/codemirror/merge/merge.css');
        }
        // xml edit
        drupal_add_js($modulePath . '/ui/lib/codemirror/xml.js');
        drupal_add_js($modulePath . '/ui/js/resourceedit.js');
        drupal_add_css($modulePath . '/ui/lib/codemirror/codemirror.css',  array('group' => CSS_DEFAULT, 'every_page' => FALSE)); 
 
    } else {
        drupal_add_js($modulePath . '/ui/js/repository.js');
    }

    // Add stylesheets
    drupal_add_css($modulePath . '/ui/css/repository.css',  array('group' => CSS_DEFAULT, 'every_page' => FALSE)); 
    return theme('repository_'.$template.'_edit',array());
}
function repository_timeline_events(){
    $projectParam = array();
    if (isset($_GET['project'])) {
       $projectParam = array('query' => array('project' => $_GET['project']));
    }
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = l('Events','repository/events',$projectParam);
    $breadcrumb[] = t(drupal_get_title()); 
    drupal_set_breadcrumb($breadcrumb);
    // Add scripts
    $modulePath = drupal_get_path('module', 'repository');
    drupal_add_css($modulePath.'/ui/lib/timeline/css/timeline.css',  array('group' => CSS_DEFAULT, 'every_page' => FALSE));
    drupal_add_js($modulePath.'/ui/lib/timeline/js/storyjs-embed.js');
    drupal_add_js($modulePath . '/ui/lib/handlebars.js');
    drupal_add_js($modulePath . '/ui/js/entitytemplates.js'); 
    drupal_add_js($modulePath.'/ui/js/timelineevents.js'); 
    return theme('repository_visualize',array());
}
function repository_map_events($id=null){
    $projectParam = array();
    if (isset($_GET['project'])) {
       $projectParam = array('query' => array('project' => $_GET['project']));
    }
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = l('Events','repository/events',$projectParam);
    $breadcrumb[] = t(drupal_get_title()); 
    drupal_set_breadcrumb($breadcrumb);
    // Add scripts
    $modulePath = drupal_get_path('module', 'repository'); 
    drupal_add_css('http://cdn.leafletjs.com/leaflet-0.4/leaflet.css',array('type' => 'external'));
    drupal_add_js('http://cdn.leafletjs.com/leaflet-0.4/leaflet.js',array('type' => 'external'));
    drupal_add_css($modulePath . '/ui/css/repository.css'); 
    drupal_add_js($modulePath . '/ui/lib/oms.min.js');
    drupal_add_js($modulePath . '/ui/lib/handlebars.js');
    drupal_add_js($modulePath . '/ui/js/entitytemplates.js');
    drupal_add_js($modulePath . '/ui/js/mapevents.js');
    return theme('repository_visualize',array());
}
function repository_visualize($template, $id=null){
    if (!in_array($template,array("agents","artefacts","versions","works", "resources", "events"))) {
        drupal_access_denied();
        return;
    }
    $projectParam = array();
    if (isset($_GET['project'])) {
       $projectParam = array('query' => array('project' => $_GET['project']));
    }
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = l(ucwords($template),'repository/'.$template,$projectParam);
    $breadcrumb[] = t(drupal_get_title()); 
    drupal_set_breadcrumb($breadcrumb);
    // Add scripts
    $modulePath = drupal_get_path('module', 'repository');
    drupal_add_js($modulePath . '/ui/lib/graphdracula/raphael.js');
    drupal_add_js($modulePath . '/ui/lib/graphdracula/dracula_graffle.js');
    drupal_add_js($modulePath . '/ui/lib/graphdracula/dracula_graph.js');
    //drupal_add_js($modulePath . '/ui/js/lib/graphdracula/dracula_algorithms.js');
    drupal_add_js($modulePath . '/ui/js/visualizeentity.js');
    return theme('repository_visualize',array());
}
function repository_display_resource($id,$raw=null){
    $projectParam = array();
    if (isset($_GET['project'])) {
     $projectParam = array('query' => array('project' => $_GET['project']));
    }
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = l('Resources','repository/resources',$projectParam);
    $breadcrumb[] = l('View Resource','repository/resources/'.$id,$projectParam);
    $breadcrumb[] = t('View Resource Content'); 
    drupal_set_breadcrumb($breadcrumb);
    if ($raw == 'raw'){
        repository_render_tei($id);
    } else {
        //too slow use ajax instead - return theme('resources_content',array('content'=>$result));
        $modulePath = drupal_get_path('module', 'repository');
        if (isset($_GET['cloud'])) {
            drupal_add_css($modulePath . '/ui/css/repository.css');
            drupal_add_js($modulePath . '/ui/lib/d3cloud/d3.js');
            drupal_add_js($modulePath . '/ui/lib/d3cloud/d3.layout.cloud.js');
            drupal_add_js($modulePath . '/ui/js/wordcloud.js');
        }
        drupal_add_js($modulePath . '/ui/lib/handlebars.js');
        drupal_add_js($modulePath . '/ui/js/entitytemplates.js');
        drupal_add_js($modulePath . '/ui/js/displayresource.js');
        drupal_add_css($modulePath . '/ui/css/tei.css');
        return theme('repository_resources_content',array());
    }
}
// shift to repository api
function repository_render_tei($id){
    $modulePath = drupal_get_path('module', 'repository');
    $resurl = 'http://' . $_SERVER['HTTP_HOST'] . "/" . drupal_get_path('module', 'repository') . "/api/resources/" . $id;
    $xslurl = $modulePath . '/ui/xslt/formats.xsl';
    $dom = new DomDocument();
    @$valid = $dom->load($resurl);
    if (!$valid) {
        //watchdog('TEI Content', "Invalid XML/TEI Content", array(), WATCHDOG_WARNING);
        echo "<pre>".file_get_contents($resurl)."</pre>";
    }
    $xslDoc = new DomDocument();
    $xslDoc->load($xslurl);
    
    $proc = new XsltProcessor();
    $proc->importStylesheet($xslDoc);
    echo $proc->transformToXML($dom);
}

function repository_display_record($template, $id=null){
    if (!in_array($template,array("agents","artefacts","versions","works", "resources", "places", "events", "collections"))) {
        drupal_access_denied();
        return;
    }
    $projectParam = array();
    if (isset($_GET['project'])) {
     $projectParam = array('query' => array('project' => $_GET['project']));
    }
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    _add_project_or_repository($breadcrumb);
    $breadcrumb[] = l(ucwords($template),'repository/'.$template,$projectParam);
    $breadcrumb[] = t('View ' . ucfirst(substr($template,0,-1))); 
    drupal_set_breadcrumb($breadcrumb);
    
    // Add scripts
    $modulePath = drupal_get_path('module', 'repository');
    
    drupal_add_css('http://cdn.leafletjs.com/leaflet-0.4/leaflet.css',array('type' => 'external'));
    drupal_add_js('http://cdn.leafletjs.com/leaflet-0.4/leaflet.js',array('type' => 'external'));
    
    // Add stylesheets
    drupal_add_css($modulePath . '/ui/css/repository.css');
    drupal_add_js($modulePath . '/ui/lib/handlebars.js'); 
    drupal_add_js($modulePath . '/ui/js/entitytemplates.js');
    drupal_add_js($modulePath . '/ui/js/repository.js');
    return theme('repository_display_record',array());
}
function repository_toc() {
  $projectParam = array();
  if (isset($_GET['project'])) {
     $projectParam = array('query' => array('project' => $_GET['project']));
  }
  $list[] = l("Artefacts","repository/artefacts",$projectParam);
  $list[] = l("Versions","repository/versions",$projectParam);
  $list[] = l("Works","repository/works",$projectParam);
  $list[] = l("Digital Resources","repository/resources",$projectParam);
  $list[] = l("Agents","repository/agents",$projectParam);
  $list[] = l("Events","repository/events",$projectParam);
  $list[] = l("Places", "repository/places",$projectParam);
  $list[] = l("MVDs", "repository/mvds",$projectParam);
  $list[] = l("Collections", "repository/collections",$projectParam);
  $render_array['repository_list'] = array(
    '#theme' => 'item_list',  
    '#items' => $list
  );
  return $render_array;
}
function repository_theme(){
 return array(
    'repository_display' => array(
        'template' => 'ui/listobjects',
        'variables' => array()
    ),
    'repository_visualize' => array(
        'template' => 'ui/visualizeobject',
        'variables' => array()
    ),
    'repository_display_record' => array(
        'template' => 'ui/displayobject',
        'variables' => array()
    ),
    'repository_agents_edit' => array(
        'template' => 'ui/agents_edit',
        'variables' => array()
    ),
    'repository_events_edit' => array(
        'template' => 'ui/events_edit',
        'variables' => array()
    ),
    'repository_artefacts_edit' => array(
       'template' => 'ui/artefacts_edit',
       'variables' => array()
    ),
    'repository_versions_edit' => array(
       'template' => 'ui/versions_edit',
       'variables' => array()
    ),
    'repository_works_edit' => array(
       'template' => 'ui/works_edit',
       'variables' => array()
    ),
    'repository_resources_edit' => array(
        'template' => 'ui/resources_edit',
        'variables' => array()
    ),
    'repository_mvds_edit' => array(
        'template' => 'ui/mvds_edit',
        'variables' => array()
    ),
    'repository_collections_edit' => array (
        'template' => 'ui/collections_edit',
        'variables' => array()
    ),
    'repository_resources' => array(
       'template' => 'ui/uploader',
       'variables' => array()
    ),
    'repository_resources_content' => array(
        'template' =>'ui/displayresource',
        'variables' => array('content' => null)
    ),
    'repository_version_toc_block' => array(
        'template' => 'ui/toc_block',
        'variables'=>  array('versionid' => null)
    )
 );
}
/** 
 * User preference for launching tools in full screen mode - for repository upload tool and other AustESE tools
 * with full screen option
 */
function repository_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form['#user'];
  $form['austese'] = array(
    '#type' => 'fieldset',
    '#title' => 'AustESE',
    '#collapsed' => FALSE,
    '#collapsible' => TRUE,
    '#weight' => 10,
  );
  $form['austese']['fullscreen'] = array(
    '#type' => 'checkbox',
    '#title' => t('AustESE tools launch full screen'),
    '#description' => t('Check this box if you want to launch AustESE tools in fullscreen mode by default'),
    '#return_value' => 1,
    '#default_value' => isset($account->data['fullscreen']) ? $account->data['fullscreen'] : 0 ,
  );
  // TODO add other preferences e.g. default metadata fields to display in editor
}
function repository_user_presave(&$edit, $account, $category) {
  $edit['data']['fullscreen'] = isset($edit['fullscreen']) ? $edit['fullscreen'] : 0;
}


function repository_block_info() {
    $blocks['project_links'] = array(
        'info' => t('Project Links'),
        'cache' => DRUPAL_NO_CACHE,
    );
    
    return $blocks;
}

function repository_block_view($delta = '') {
    $block = array();
    
    $node = menu_get_object();
    
    if ($node->type != 'project') {
        return;
    }
    
    $node_url = url('node/' . $node->nid, array('absolute' => TRUE));
    
    $project_id = $node->nid;
    
    switch ($delta) {
        case 'project_links':
            $block['subject'] = t('Project Links');
            $block['content'] = "
                <a href='/repository/artefacts?project=$project_id'>Artefacts</a><br>
                <a href='/repository/versions?project=$project_id'>Versions</a><br>
                <a href='/repository/works?project=$project_id'>Works</a><br>
                <a href='/repository/resources?project=$project_id'>Digital Resources</a><br>
                <a href='/repository/agents?project=$project_id'>Agents</a><br>
                <a href='/repository/events?project=$project_id'>Events</a><br>
                <a href='/repository/places?project=$project_id'>Places</a><br>
                <a href='/repository/mvds?project=$project_id'>MVDs</a><br>
                    ";
            break;
    }
    
    return $block;
}

/**
 * @} End of "defgroup repository".
 */
